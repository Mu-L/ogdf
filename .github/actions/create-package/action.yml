name: 'Create Package'
inputs:
  distro:
    description: "string (ubuntu/debian/.../macos/windows)"
  os:
    description: "string (linux/macos/windows)"
  cmake_args:
    description: "string"
  cmake_test_args:
    description: "string"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Set-up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: package-${{ inputs.distro }}
    - name: Set-up HTTPS proxy for ccache on Unix
      shell: bash
      run: |
        pipx install mitmproxy
        echo "PATH=$PATH:$HOME/.local/bin" >> "$GITHUB_ENV"
      if: ${{ inputs.os != 'windows' }}
    - name: Set-up HTTPS proxy for ccache on Windows
      shell: pwsh
      run: |
        pipx install mitmproxy
      if: ${{ inputs.os == 'windows' }}
    - uses: JarvusInnovations/background-action@v1
      name: Start HTTPS proxy for ccache
      with:
        run: mitmdump --mode reverse:https://${CCACHE_REMOTE_STORAGE_HOST}@44443
        wait-on: tcp:localhost:44443
        tail: false
        log-output-if: failure
        wait-for: 10s

    - name: Build and package
      shell: bash
      run: |
        mkdir build-install && cd build-install
        export CCACHE_BASEDIR="$(pwd)"
        cmake .. ${{ inputs.cmake_args }}

        echo "::group::>Debug build"
        cmake --build . --config Debug
        echo
        readelf -d Debug/*.so || echo "readelf failed"
        echo "::endgroup::"
        echo "::group::>Release build"
        cmake --build . --config Release
        echo
        readelf -d Release/*.so || echo "readelf failed"
        echo "::endgroup::"

        echo "::group::>Packaging"
        # cmake --build . --target package
        mkdir -p ../packages/install-manifests
        cpack --verbose | tee ../packages/install-manifests/cpack.log
        echo "::endgroup::"

    - name: Install for testing
      shell: bash
      run: |
        cd build-install
        mkdir -p ../packages/install-manifests
        cmake --build . --config Debug --target install >   ../packages/install-manifests/install-debug.log
        cp install_manifest.txt                             ../packages/install-manifests/install_manifest-debug.txt
        cmake --build . --config Release --target install > ../packages/install-manifests/install-release.log
        cp install_manifest.txt                             ../packages/install-manifests/install_manifest-release.txt
        cmake --build . --config Debug --target install >   ../packages/install-manifests/install-debug2.log
        # this installs to "C:/Program Files (x86)/OGDF-PROJECT" on windows

    - name: Test Installed Package
      uses: ./.github/actions/test-installed-package
      with:
        bin_path: "C:/Program Files (x86)/OGDF-PROJECT/bin"
        exc_special_path: "${{ github.workspace }}/doc/examples/special"
        cmake_test_args: "${{ inputs.cmake_test_args }}"

    - name: Store packages
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: packages-${{ inputs.os }}
        path: packages/

    - name: Store build results for debugging
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-${{ inputs.os }}
        path: |
          build-install/
          build-test/
          !**/*.obj
          !**/*.iobj
